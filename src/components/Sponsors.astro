---
const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN;

if (!GITHUB_TOKEN) throw Error('Error generator sponsor list: GITHUB_TOKEN is invalid or not set');

// https://docs.github.com/graphql
const gitHubQuery = `query {
  organization(login:"tauri-apps") {
    sponsors(first: 100) {
      nodes {
        ... on Actor {
          login,
          avatarUrl
        }
      }
    }
  }
}`;

type Sponsor = {
	id: string;
	name: string;
	avatarUrl: string;
	amount?: number;
};

const gitHubSponsorResponse = await fetch('https://api.github.com/graphql', {
	method: 'POST',
	body: JSON.stringify({ query: gitHubQuery }),
	headers: {
		Authorization: `bearer ${GITHUB_TOKEN}`,
	},
});

if (!gitHubSponsorResponse.ok)
	throw Error(
		`There was an issue with the GitHub sponsors query: ${gitHubSponsorResponse.status}: ${gitHubSponsorResponse.statusText}`
	);

const gitHubSponsorData = (await gitHubSponsorResponse.json()).data
const gitHubSponsors: Sponsor[] = gitHubSponsorData.organization.sponsors.nodes.map((node: any) => ({
	id: node.login,
	name: node.login,
	avatarUrl: node.avatarUrl
})).sort((a: Sponsor, b: Sponsor) => a.name.localeCompare(b.name))

// TODO: Need to pull in all of the historical transactions, right now it's only the last 1000
// Documentation at https://graphql-docs-v2.opencollective.com/welcome
const openCollectiveQuery = `query account {
  collective(slug: "tauri") {
    contributors(limit: 1000) {
      nodes {
        name
		image
		totalAmountDonated
      }
    }
  }
}`;

const openCollectiveResponse = await fetch('https://api.opencollective.com/graphql/v2', {
	method: 'POST',
	body: JSON.stringify({ query: openCollectiveQuery }),
	headers: {
		'Content-Type': 'application/json',
	},
})

if (!openCollectiveResponse.ok)
	throw Error(
		`There was an issue with the Open Collective sponsors query: ${openCollectiveResponse.status} ${openCollectiveResponse.statusText}`
	);

const openCollectiveData = (await openCollectiveResponse.json()).data
const openCollectiveSponsors: Sponsor[] = openCollectiveData.collective.contributors.nodes.map((node: any) => ({
	login: node.name,
	id: node.name,
	avatarUrl: node.image,
	amount: node.totalAmountDonated
})).sort((a: Sponsor,b: Sponsor) => b.amount! - a.amount!)

---

<h1>Sponsors</h1>
<h2>Open Collective</h2>
<ul>
	{openCollectiveSponsors.map((sponsor) => <li>{sponsor.id} donated {sponsor.amount}</li>)}
</ul>
<h2>GitHub</h2>
<ul>
	{gitHubSponsors.map((sponsor) => <li>{sponsor.id}</li>)}
</ul>
